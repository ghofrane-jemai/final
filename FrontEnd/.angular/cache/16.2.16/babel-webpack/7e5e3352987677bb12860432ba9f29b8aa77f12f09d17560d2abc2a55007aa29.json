{"ast":null,"code":"import _asyncToGenerator from \"D:/3emeISAMM/PFE/Code/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport emailjs from '@emailjs/browser';\nvar UserFields;\n(function (UserFields) {\n  UserFields[\"FirstName\"] = \"firstName\";\n  UserFields[\"LastName\"] = \"lastName\";\n  UserFields[\"Country\"] = \"country\";\n  UserFields[\"City\"] = \"city\";\n  UserFields[\"Dob\"] = \"dob\";\n  UserFields[\"Gender\"] = \"gender\";\n  UserFields[\"IdCardFront\"] = \"idCardFront\";\n  UserFields[\"IdCardBack\"] = \"idCardBack\";\n  UserFields[\"Selfie\"] = \"selfie\";\n})(UserFields || (UserFields = {}));\nexport let HomeComponent = class HomeComponent {\n  ngOnInit() {\n    emailjs.init('YOUR_EMAILJS_USER_ID'); // À obtenir sur emailjs.com\n    this.onCountryChange();\n  }\n  generateToken() {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  }\n  sendVerificationEmail() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.user.email || !_this.validateEmail(_this.user.email)) {\n        alert('Veuillez entrer un email valide');\n        return;\n      }\n      _this.verificationToken = _this.generateToken();\n      _this.emailVerificationSent = true;\n      // Sauvegarder les données temporairement\n      localStorage.setItem('tempFormData', JSON.stringify(_this.user));\n      localStorage.setItem('verificationToken', _this.verificationToken);\n      const verificationLink = `${window.location.origin}/verify?token=${_this.verificationToken}&email=${encodeURIComponent(_this.user.email)}`;\n      try {\n        yield emailjs.send('YOUR_EMAILJS_SERVICE_ID', 'YOUR_EMAILJS_TEMPLATE_ID', {\n          to_email: _this.user.email,\n          verification_link: verificationLink\n        });\n        alert('Email de vérification envoyé !');\n      } catch (error) {\n        console.error('Erreur lors de l\\'envoi:', error);\n        alert('Erreur lors de l\\'envoi de l\\'email');\n      }\n    })();\n  }\n  checkEmail() {\n    const storedToken = localStorage.getItem('verificationToken');\n    const storedEmail = localStorage.getItem('verifiedEmail');\n    if (storedToken && storedEmail === this.user.email) {\n      this.emailVerified = true;\n    } else {\n      this.emailVerified = false;\n    }\n  }\n  ngOnInit() {\n    this.onCountryChange(); // pour initialiser la liste des villes dès le début\n  }\n\n  constructor(http) {\n    this.http = http;\n    this.UserFields = UserFields; // Exposer l'énumération\n    this.lastNameInput = null; // Référence pour le champ lastName\n    this.videoElement = null;\n    this.canvasElement = null;\n    // Gestion des étapes\n    this.currentStep = 1;\n    this.steps = [{\n      number: 1,\n      title: 'Données personnelles',\n      completed: false\n    }, {\n      number: 2,\n      title: 'Vivacité',\n      completed: false\n    }, {\n      number: 3,\n      title: 'Insertion CIN',\n      completed: false\n    }];\n    // Dans la classe\n    this.emailVerified = false;\n    this.emailVerificationSent = false;\n    this.verificationToken = '';\n    this.user = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      postalCode: '',\n      address: '',\n      country: 'Tunisie',\n      city: '',\n      dob: '',\n      dobArabic: '',\n      gender: '',\n      genderArabic: '',\n      idCardFront: '',\n      idCardBack: '',\n      extractedDataFront: {},\n      extractedDataBack: {},\n      selfie: '',\n      rectoFaceId: '',\n      successFaceId: '',\n      numeroUniqueCB: '',\n      dateDelivranceCB: '',\n      numeroUniqueExtrait: '',\n      Datededélivrance: ''\n    };\n    this.ageError = '';\n    this.dateError = '';\n    this.cities = [];\n    this.selectedVersoImage = null;\n    this.selectedVersoImageHash = null;\n    this.isSubmitting = false;\n    this.livenessStatus = '';\n    this.successFaceId = '';\n    this.previousFirstname = '';\n    this.previousLastname = '';\n    this.citiesByCountry = {\n      \"Tunisie\": [\"Nabeul\", \"Qurbus\", \"Kélibia\", \"Yasmine Hammamet\", \"Kerkouane\", \"Al Huwariyah\", \"Kairouan\", \"Douz\", \"Nefta\", \"Ksar Ghilane\", \"Gafsa\", \"Degueche\", \"Shabikah\", \"Tozeur\", \"Bizerte\", \"Takrouna\", \"Djebba\", \"Midoun\", \"Djerba Ajim\", \"Ghizen\", \"Arkou\", \"Houmt Souk\", \"Aghir\", \"Hara Sghira Er Riadh\", \"Mellita\", \"Souk Houmet\", \"Mezraia\", \"Djerba Midun\", \"Ksar Hadada\", \"Tataouine Nord\", \"Tataouine Ville\", \"Ghomrassen\", \"Testour\", \"Kesra\", \"Beja, Tunisie\", \"Le Kef\", \"Makthar\", \"Sabria\", \"Toujane\", \"Zaghouan\", \"Zriba\", \"Matmata\", \"Gabès Médina\", \"Tamezret\", \"La Marsa\", \"La Goulette\", \"Tunis\", \"Carthage\", \"Sidi Bou Saïd\", \"Sbeïtla\", \"Monastir\", \"Sahline\", \"Ariana, Tunisie\", \"CHENINI\", \"Douiret\", \"Bani Khedeche\", \"Ksar Ouled Brahim\", \"Sangho\", \"Médine\", \"Mahboubine\", \"Khalfallah\", \"Ksar Hallouf\", \"Zarzis\", \"Guellala\", \"Hammam Sousse\", \"Hammamet\", \"Sousse\", \"M'saken\", \"El Jem\", \"Hiboun\", \"Mahdia\"]\n    };\n  }\n  nextStep() {\n    if (this.currentStep < this.steps.length && this.validateCurrentStep()) {\n      this.currentStep++;\n      this.updateSteps();\n    }\n  }\n  prevStep() {\n    if (this.currentStep > 1) {\n      this.currentStep--;\n      this.updateSteps();\n    }\n  }\n  updateSteps() {\n    this.steps.forEach(step => {\n      step.completed = step.number < this.currentStep;\n    });\n  }\n  validateCurrentStep() {\n    switch (this.currentStep) {\n      case 1:\n        // Données personnelles\n        return this.validatePersonalInfo();\n      case 2:\n        // Vivacité\n        return this.user.selfie !== null;\n      case 3:\n        // Insertion CIN\n        return this.user.idCardFront !== null && this.user.idCardBack !== null;\n      default:\n        return false;\n    }\n  }\n  validatePersonalInfo() {\n    return this.user.firstName !== '' && this.user.lastName !== '' && this.user.email !== '' && this.user.phone !== '' && this.user.postalCode !== '' && this.user.address !== '' && this.user.country !== '' && this.user.city !== '' && this.user.dob !== '' && this.user.gender !== '';\n  }\n  validateForm() {\n    return this.validatePersonalInfo() && this.user.selfie !== null && this.user.idCardFront !== null && this.user.idCardBack !== null;\n  }\n  validateEmail(email) {\n    const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return re.test(String(email).toLowerCase());\n  }\n  onFileChangeRecto(event, field) {\n    const input = event.target;\n    if (input.files && input.files.length > 0) {\n      const file = input.files[0];\n      // Réinitialiser les données extraites et autres champs liés au recto\n      this.user.extractedDataFront = {}; // Réinitialiser les résultats extraits\n      this.user.rectoFaceId = null; // Réinitialiser le faceId du recto\n      this.user.idCardFront = null; // Réinitialiser l'image du recto en base64\n      this.user.numeroUniqueExtrait = null;\n      // Vérification de l'extension du fichier\n      const allowedExtensions = ['jpg', 'jpeg', 'png'];\n      const fileExtension = file.name.split('.').pop()?.toLowerCase();\n      if (!allowedExtensions.includes(fileExtension || '')) {\n        alert('Erreur : Seuls les fichiers JPG, JPEG et PNG sont autorisés.');\n        return; // Arrêter le traitement si l'extension n'est pas valide\n      }\n      // Appeler le serveur pour traiter l'image\n      const formData = new FormData();\n      formData.append('image', file);\n      this.http.post('http://localhost:5001/ocr/recto', formData).subscribe(response => {\n        console.log('Résultat OCR Recto:', response);\n        // Ajoutez cette vérification au début du traitement de la réponse\n        if (response.message === \"Image probablement falsifiée (artefacts détectés)\") {\n          alert(response.message);\n          return;\n        }\n        // Le reste de votre code existant...\n        const ligne3 = response.donnees[2];\n        // Supposons que le numéro unique soit constitué de chiffres\n        const match = ligne3.match(/\\d+/); // extrait la première séquence de chiffres\n        this.user.numeroUniqueExtrait = match ? match[0] : null; // Stockage direct dans user\n        console.log('Numéro unique extrait et stocké:', this.user.numeroUniqueExtrait);\n        if (response.faceId) {\n          this.user.rectoFaceId = response.faceId; // Stocker le faceId de recto\n          console.log('Face ID de recto stocké avec succès :', this.user.rectoFaceId);\n          // Vérifier les visages si un success_face_id existe déjà\n          if (this.user.successFaceId) {\n            this.verifyFacesAndSubmit();\n          }\n        } else {\n          console.error('Aucun faceId trouvé dans la réponse.');\n        }\n        if (!response.error) {\n          alert('Succès : ' + response.message);\n        }\n        // Stocker le genre en arabe\n        this.user.gender = response.genre === 'homme' ? 'ذكر' : 'أنثى';\n        if (response.error) {\n          alert('Erreur : ' + response.message);\n          return;\n        }\n        // Convertir l'image en base64 et stocker\n        this.getBase64Image(file).then(base64 => {\n          this.user.idCardFront = base64;\n        });\n        // Stocker les données extraites\n        this.user.extractedDataFront = response.donnees;\n        // Envoyer les données à comparaison_N_P.py\n        const ocrData = {\n          'ocr_result': this.user.extractedDataFront,\n          'genre': this.user.gender // Envoyer le genre au serveur\n        };\n\n        this.http.post('http://localhost:5003/ocr-extraction', ocrData).subscribe(response => {\n          console.log(`Résultats d'extraction OCR envoyés au serveur Python :`, response);\n        }, error => {\n          console.error('Erreur lors de l\\'envoi des données à comparaison_N_P.py (OCR Recto):', error);\n        });\n        if (this.selectedVersoImage) {\n          this.processVersoImage(this.selectedVersoImage);\n        }\n      }, error => {\n        console.error('Erreur lors du traitement OCR Recto :', error);\n      });\n    }\n  }\n  processVersoImage(image) {\n    // Nettoyer les données précédentes du Verso\n    this.user.idCardBack = null;\n    this.user.extractedDataBack = {};\n    const formData = new FormData();\n    formData.append('image', image);\n    this.http.post('http://localhost:5002/ocr/verso', formData).subscribe(response => {\n      console.log('Résultat OCR Verso:', response);\n      if (response.message === \"Conditions non remplies\") {\n        alert(\"Erreur : Elle ne s'agit pas d'un Verso de CIN\");\n        return;\n      }\n      this.getBase64Image(image).then(base64 => {\n        this.user.idCardBack = base64;\n      });\n      this.user.extractedDataBack = response.donnees; // Stocker les résultats extractés\n    }, error => {\n      console.error('Erreur lors du traitement OCR Verso:', error);\n    });\n  }\n  onFileChangeVerso(event, field) {\n    const input = event.target;\n    if (input.files && input.files.length > 0) {\n      this.selectedVersoImage = input.files[0]; // Stocker l'image Verso\n      this.selectedVersoImageHash = this.selectedVersoImage.name + this.selectedVersoImage.lastModified;\n      const file = input.files[0];\n      // Vérification de l'extension du fichier\n      const allowedExtensions = ['jpg', 'jpeg', 'png'];\n      const fileExtension = file.name.split('.').pop()?.toLowerCase();\n      if (!allowedExtensions.includes(fileExtension || '')) {\n        alert('Erreur : Seuls les fichiers JPG, JPEG et PNG sont autorisés.');\n        return; // Arrêter le traitement si l'extension n'est pas valide\n      }\n\n      this.user.idCardBack = null;\n      this.user.extractedDataBack = {};\n      // Appeler le serveur pour traiter l'image\n      const formData = new FormData();\n      formData.append('image', file);\n      this.http.post('http://localhost:5002/ocr/verso', formData).subscribe(response => {\n        console.log('Résultat OCR Verso:', response);\n        // Accéder à la ligne 4 dans le tableau `donnees`\n        const ligne4 = response.donnees[4];\n        // Vérifier qu'elle existe et contient une date\n        if (ligne4) {\n          const match = ligne4.match(/(\\d{2}\\s\\S+\\s\\d{4})/);\n          this.user.Datededélivrance = match ? match[1] : null; // Stockage direct\n          console.log('Date de délivrance extraite:', this.user.Datededélivrance);\n        } else {\n          console.log(\"La ligne 4 n'existe pas dans les données OCR.\");\n        }\n        console.log('Données code-barres:', response.code_barres);\n        if (response.code_barres && response.code_barres.length > 0) {\n          const barcode = response.code_barres[0]; // Prend le premier code-barres\n          const numeroUniqueCB = barcode.substring(0, 8);\n          const dateRaw = barcode.slice(-6); // 6 derniers chiffres\n          const jour = dateRaw.substring(0, 2);\n          const mois = dateRaw.substring(2, 4);\n          const yy = parseInt(dateRaw.substring(4, 6), 10);\n          const annee = yy < 25 ? `20${yy.toString().padStart(2, '0')}` : `19${yy.toString().padStart(2, '0')}`;\n          const moisArabe = {\n            '01': 'جانفي',\n            '02': 'فيفري',\n            '03': 'مارس',\n            '04': 'أفريل',\n            '05': 'ماي',\n            '06': 'جوان',\n            '07': 'جويلية',\n            '08': 'أوت',\n            '09': 'سبتمبر',\n            '10': 'أكتوبر',\n            '11': 'نوفمبر',\n            '12': 'ديسمبر'\n          };\n          const moisNom = moisArabe[mois] || 'غير معروف';\n          const dateDelivranceCB = `${jour} ${moisNom} ${annee}`;\n          console.log(\"Numéro unique (Code-barres):\", numeroUniqueCB);\n          console.log(\"Date de délivrance (Code-barres):\", dateDelivranceCB);\n          this.user.numeroUniqueCB = numeroUniqueCB;\n          this.user.dateDelivranceCB = dateDelivranceCB;\n        }\n        if (response.message != \"Conditions non remplies\") {\n          alert(\"Erreur : L'image insérée est un Verso\");\n        }\n        if (response.message === \"Conditions non remplies\") {\n          alert(\"Erreur : Elle ne s'agit pas d'un Verso de CIN\");\n          return;\n        }\n        this.getBase64Image(file).then(base64 => {\n          this.user.idCardBack = base64;\n        });\n        this.user.extractedDataBack = response.donnees; // Stocker les résultats extractés\n      }, error => {\n        console.error('Erreur lors du traitement OCR Verso:', error);\n      });\n    }\n  }\n  // Nouvelle méthode pour convertir l'image en base64\n  getBase64Image(file) {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    return new Promise(resolve => {\n      reader.onload = () => resolve(reader.result);\n    });\n  }\n  checkCameraAccess() {\n    return _asyncToGenerator(function* () {\n      try {\n        // Demande l'accès à la caméra\n        const stream = yield navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        // Libère la caméra après la vérification\n        stream.getVideoTracks()[0].stop();\n        return true; // La caméra est accessible\n      } catch (error) {\n        console.error('Erreur d\\'accès à la caméra :', error);\n        return false; // La caméra n'est pas accessible\n      }\n    })();\n  }\n\n  liveness(event) {\n    event.preventDefault();\n    // Réinitialiser les données de selfie et faceId\n    this.user.successFaceId = null;\n    this.user.selfie = null;\n    // Vérifier si la caméra est accessible\n    this.checkCameraAccess().then(cameraAccessible => {\n      if (!cameraAccessible) {\n        alert('La caméra est fermée ou inaccessible.');\n        return;\n      }\n      this.http.post('http://localhost:5005/api/liveness', {}).subscribe(response => {\n        console.log('Résultat de la détection de vivacité :', response);\n        if (response.status === 'success') {\n          alert('Détection de vivacité réussie !');\n          if (response.success_face_id) {\n            this.user.successFaceId = response.success_face_id;\n            console.log('Face ID de success stocké avec succès :', this.user.successFaceId);\n          }\n          if (response.selfie) {\n            this.user.selfie = response.selfie;\n            console.log('Image selfie stockée avec succès');\n          }\n          if (this.user.rectoFaceId) {\n            this.verifyFacesAndSubmit();\n          }\n        } else {\n          alert('Échec de la détection de vivacité.');\n        }\n      }, _ => {\n        // Ne pas afficher d'erreur technique, juste un message propre\n        this.livenessStatus = 'failure';\n        console.log('Impossible de détecter la vivacité (erreur de requête).');\n        alert('Vous n\\'êtes pas une personne réelle.');\n      });\n    });\n  }\n  onCountryChange() {\n    const selectedCountry = this.user.country;\n    this.cities = this.citiesByCountry[selectedCountry] || [];\n    this.user.city = '';\n  }\n  convertDateToArabic(dateStr) {\n    return new Promise((resolve, reject) => {\n      if (!dateStr) {\n        resolve('');\n        return;\n      }\n      const parts = dateStr.split('/');\n      if (parts.length !== 3) {\n        resolve(dateStr); // Retourne la date originale si le format est incorrect\n        return;\n      }\n      const day = parts[0];\n      const month = parts[1];\n      const year = parts[2];\n      const monthNames = ['جانفي', 'فيفري', 'مارس', 'أفريل', 'ماي', 'جوان', 'جويلية', 'أوت', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'];\n      const monthIndex = parseInt(month, 10) - 1;\n      if (monthIndex < 0 || monthIndex >= 12) {\n        resolve(dateStr); // Retourne la date originale si le mois est invalide\n        return;\n      }\n      const arabicDate = `${day} ${monthNames[monthIndex]} ${year}`;\n      resolve(arabicDate);\n    });\n  }\n  onDateChange() {\n    const birthdate = new Date(this.user.dob);\n    const today = new Date();\n    if (birthdate.getFullYear() > today.getFullYear()) {\n      this.dateError = \"Choix incorrect : l'année choisie ne peut pas être supérieure à l'année actuelle.\";\n      this.ageError = \"\";\n      return;\n    } else {\n      this.dateError = \"\";\n    }\n    const age = today.getFullYear() - birthdate.getFullYear();\n    const monthDiff = today.getMonth() - birthdate.getMonth();\n    if (age < 18 || age === 18 && monthDiff < 0) {\n      this.ageError = \"Vous devez avoir au moins 18 ans.\";\n    } else {\n      this.ageError = \"\";\n    }\n    // Convertir la date en format arabe et l'envoyer au serveur\n    const formattedDate = this.formatDate(this.user.dob);\n    this.convertDateToArabic(formattedDate).then(arabicDate => {\n      this.user.dobArabic = arabicDate;\n      console.log('Date transformée en arabe:', this.user.dobArabic);\n      // Envoyer la date au serveur\n      this.sendTransliteratedDate(arabicDate);\n    }).catch(error => {\n      console.error('Erreur lors de la conversion de la date:', error);\n    });\n  }\n  sendTransliteratedDate(arabicDate) {\n    const apiUrl = 'http://localhost:5003/transliterate-names';\n    const data = {\n      'تاريخ الولادة': arabicDate\n    };\n    this.http.post(apiUrl, data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).subscribe(response => {\n      console.log('Date en arabe envoyée avec succès:', response);\n    }, error => {\n      console.error('Erreur lors de l\\'envoi de la date:', error);\n    });\n  }\n  onGenderChange(genre) {\n    this.user.genderArabic = genre; // Mettre à jour le genre dans l'objet user\n    console.log('Genre sélectionné:', this.user.genderArabic);\n    // Envoyer le genre au serveur\n    this.sendTransliteratedGender(genre);\n  }\n  sendTransliteratedGender(genre) {\n    const apiUrl = 'http://localhost:5003/transliterate-names';\n    // Convertir le genre en arabe\n    const genderArabic = genre === 'homme' ? 'ذكر' : 'أنثى';\n    const data = {\n      'الجنس': genderArabic // Utiliser le genre en arabe\n    };\n\n    this.http.post(apiUrl, data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).subscribe(response => {\n      console.log('Genre en arabe envoyé avec succès:', response);\n    }, error => {\n      console.error('Erreur lors de l\\'envoi du genre:', error);\n    });\n  }\n  checkFocusOutFirstName(event) {\n    const firstname = event.target.value.trim();\n    if (firstname !== '' && firstname !== this.previousFirstname) {\n      this.sendTransliteratedName('firstName', firstname);\n      this.previousFirstname = firstname;\n    }\n  }\n  checkFocusOutLastName(event) {\n    const lastname = event.target.value.trim();\n    if (lastname !== '' && lastname !== this.previousLastname) {\n      this.sendTransliteratedName('lastName', lastname);\n      this.previousLastname = lastname;\n    }\n  }\n  sendTransliteratedName(field, value) {\n    const apiUrl = 'http://localhost:5000/transliterate';\n    const data = {\n      [field === 'firstName' ? 'firstName' : 'lastName']: value\n    };\n    this.http.post(apiUrl, data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).subscribe(response => {\n      const transliteratedName = field === 'firstName' ? response['الاسم'] : response['اللقب'];\n      console.log(`${field} translittéré : ${transliteratedName}`);\n      // Envoyer le résultat au serveur Python\n      const sendData = {\n        [field === 'firstName' ? 'الاسم' : 'اللقب']: transliteratedName\n      };\n      this.http.post('http://localhost:5003/transliterate-names', sendData, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).subscribe(sendResponse => {\n        console.log(`${field} envoyé au serveur Python avec succès`);\n      }, sendError => {\n        console.error(`Erreur lors de l'envoi de ${field} au serveur Python :`, sendError);\n      });\n    }, error => {\n      console.error(`Erreur lors de la translittération de ${field} :`, error);\n    });\n  }\n  transliterateFirstName() {\n    if (this.user.firstName.trim() !== '') {\n      const apiUrl = 'http://localhost:5000/transliterate';\n      const data = {\n        firstName: this.user.firstName\n      };\n      this.http.post(apiUrl, data, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).subscribe(response => {\n        console.log(`Prénom translittéré : ${response['الاسم']}`);\n        // Traitement supplémentaire si nécessaire\n      }, error => {\n        console.error('Erreur lors de la translittération du prénom :', error);\n      });\n    }\n  }\n  transliterateLastName() {\n    if (this.user.lastName.trim() !== '') {\n      const apiUrl = 'http://localhost:5000/transliterate';\n      const data = {\n        lastName: this.user.lastName\n      };\n      this.http.post(apiUrl, data, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).subscribe(response => {\n        console.log(`Nom translittéré : ${response['اللقب']}`);\n        // Traitement supplémentaire si nécessaire\n      }, error => {\n        console.error('Erreur lors de la translittération du nom :', error);\n      });\n    }\n  }\n  verifyFacesAndSubmit() {\n    // Récupérer les faceId depuis les réponses précédentes\n    const faceIdRecto = this.user.rectoFaceId; // FaceId de l'image recto\n    const faceIdSuccess = this.user.successFaceId; // FaceId de l'image success\n    if (!faceIdRecto || !faceIdSuccess) {\n      alert('Les faceId ne sont pas disponibles pour la vérification.');\n      return;\n    }\n    console.log('Face ID de recto :', faceIdRecto);\n    console.log('Face ID de success :', faceIdSuccess);\n    // Préparer les données pour la vérification des visages\n    const data = {\n      faceIdRecto: faceIdRecto,\n      faceIdSuccess: faceIdSuccess\n    };\n    // Appeler l'API backend pour la vérification des visages\n    this.http.post('http://localhost:5008/api/verify-faces', data).subscribe(response => {\n      console.log('Résultat de la vérification des visages :', response);\n      if (response.isIdentical) {\n        alert('Vérification des visages réussie !');\n      } else {\n        alert('Les visages ne correspondent pas.');\n      }\n    }, error => {\n      console.error('Erreur lors de la vérification des visages :', error);\n      alert('Une erreur est survenue lors de la vérification des visages.');\n    });\n  }\n  formatPhoneNumber(event) {\n    let value = event.target.value.replace(/\\D/g, ''); // Supprime tous les caractères non numériques\n    // Limite la longueur à 8 chiffres max\n    if (value.length > 8) {\n      value = value.substring(0, 8);\n    }\n    // Formate en XX XXX XXX\n    if (value.length > 5) {\n      value = value.substring(0, 2) + ' ' + value.substring(2, 5) + ' ' + value.substring(5);\n    } else if (value.length > 2) {\n      value = value.substring(0, 2) + ' ' + value.substring(2);\n    }\n    event.target.value = value;\n  }\n  onlyNumberKey(event) {\n    const charCode = event.which ? event.which : event.keyCode;\n    // Autoriser uniquement les chiffres (0-9)\n    if (charCode > 31 && (charCode < 48 || charCode > 57)) {\n      event.preventDefault();\n      return false;\n    }\n    return true;\n  }\n  onSubmit() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.isSubmitting) return;\n      _this2.isSubmitting = true;\n      // 1. Validation des champs obligatoires\n      if (!_this2.validateForm()) {\n        alert(\"Veuillez remplir tous les champs du formulaire.\");\n        _this2.isSubmitting = false;\n        return;\n      }\n      // 2. Validation de l'âge\n      const birthdate = new Date(_this2.user.dob);\n      const today = new Date();\n      if (birthdate.getFullYear() > today.getFullYear()) {\n        alert(\"Choix incorrect : l'année choisie ne peut pas être supérieure à l'année actuelle.\");\n        _this2.isSubmitting = false;\n        return;\n      }\n      const age = today.getFullYear() - birthdate.getFullYear();\n      const monthDiff = today.getMonth() - birthdate.getMonth();\n      if (age < 18 || age === 18 && monthDiff < 0) {\n        alert(\"Vous devez avoir au moins 18 ans.\");\n        _this2.isSubmitting = false;\n        return;\n      }\n      // 3. Vérification que les faceIds sont disponibles\n      if (!_this2.user.rectoFaceId || !_this2.user.successFaceId) {\n        alert(\"La vérification faciale n'a pas été effectuée.\");\n        _this2.isSubmitting = false;\n        return;\n      }\n      // 4. Comparaison des numéros uniques et des dates\n      console.log('DEBUG - Numéro extrait:', _this2.user.numeroUniqueExtrait);\n      console.log('DEBUG - Numéro CB:', _this2.user.numeroUniqueCB);\n      if (!_this2.user.numeroUniqueExtrait || !_this2.user.numeroUniqueCB) {\n        alert(\"Les informations du recto ou du verso n'ont pas été correctement extraites.\");\n        _this2.isSubmitting = false;\n        return;\n      }\n      if (_this2.user.numeroUniqueExtrait.toString().trim() !== _this2.user.numeroUniqueCB.toString().trim()) {\n        alert(`Le numéro unique extrait du recto (${_this2.user.numeroUniqueExtrait}) ne correspond pas au numéro du code-barres (${_this2.user.numeroUniqueCB}).`);\n        _this2.isSubmitting = false;\n        return;\n      }\n      // 4. Comparaison des numéros uniques et des dates\n      console.log('DEBUG - Date de délivrance extraite:', _this2.user.Datededélivrance);\n      console.log('DEBUG - Date de délivrance CB:', _this2.user.dateDelivranceCB);\n      if (!_this2.user.Datededélivrance || !_this2.user.dateDelivranceCB) {\n        alert(\"Les dates de délivrance n'ont pas été correctement extraites.\");\n        _this2.isSubmitting = false;\n        return;\n      }\n      if (_this2.user.Datededélivrance.trim() !== _this2.user.dateDelivranceCB.trim()) {\n        alert(`La date de délivrance extraite du recto (${_this2.user.Datededélivrance}) ne correspond pas à la date du code-barres (${_this2.user.dateDelivranceCB}).`);\n        _this2.isSubmitting = false;\n        return;\n      }\n      try {\n        // 5. Vérification faciale\n        const verifyResponse = yield _this2.http.post('http://localhost:5008/api/verify-faces', {\n          faceIdRecto: _this2.user.rectoFaceId,\n          faceIdSuccess: _this2.user.successFaceId\n        }).toPromise();\n        if (!verifyResponse.isIdentical) {\n          alert(\"La vérification faciale a échoué. Les visages ne correspondent pas.\");\n          _this2.isSubmitting = false;\n          return;\n        }\n        // 6. Vérification OCR\n        const comparisonResultResponse = yield _this2.http.get('http://localhost:5003/get-comparison-result').toPromise();\n        if (comparisonResultResponse.statut == \"ok\") {\n          alert(\"Les données insérées se correspondent.\");\n          _this2.isSubmitting = true;\n        }\n        if (comparisonResultResponse.statut !== \"ok\") {\n          alert(\"Les données insérées ne se correspondent pas.\");\n          _this2.isSubmitting = false;\n          return;\n        }\n        // Toutes les validations sont passées - soumission des données\n        const userData = {\n          firstName: _this2.user.firstName,\n          lastName: _this2.user.lastName,\n          country: _this2.user.country,\n          city: _this2.user.city,\n          dob: _this2.formatDate(_this2.user.dob),\n          dobArabic: _this2.user.dobArabic,\n          gender: _this2.user.gender,\n          idCardFront: _this2.user.idCardFront,\n          idCardBack: _this2.user.idCardBack,\n          extractedDataFront: _this2.user.extractedDataFront,\n          extractedDataBack: _this2.user.extractedDataBack,\n          selfie: _this2.user.selfie,\n          comparisonStatus: comparisonResultResponse.statut,\n          faceVerified: verifyResponse.isIdentical,\n          numeroUniqueCB: _this2.user.numeroUniqueCB,\n          dateDelivranceCB: _this2.user.dateDelivranceCB,\n          numeroUniqueExtrait: _this2.user.numeroUniqueExtrait,\n          Datededélivrance: _this2.user.Datededélivrance\n        };\n        _this2.http.post('http://localhost:5000/api/users', userData).subscribe(response => {\n          console.log('Utilisateur ajouté avec succès!');\n          alert('Création du compte se fait avec succès!');\n          // Réinitialiser le formulaire\n          _this2.resetForm();\n          // Revenir à l'étape 1\n          _this2.currentStep = 1;\n          _this2.updateSteps();\n        }, error => {\n          console.error('Erreur lors de l\\'ajout:', error);\n          alert('Erreur lors de l\\'enregistrement: ' + error.error.message);\n        }).add(() => {\n          _this2.isSubmitting = false;\n        });\n      } catch (error) {\n        console.error(\"Erreur:\", error);\n        alert(\"Une erreur est survenue lors de la vérification.\");\n        _this2.isSubmitting = false;\n      }\n    })();\n  }\n  resetForm() {\n    this.user = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      postalCode: '',\n      address: '',\n      country: '',\n      city: '',\n      dob: '',\n      dobArabic: '',\n      gender: '',\n      genderArabic: '',\n      idCardFront: '',\n      idCardBack: '',\n      extractedDataFront: {},\n      extractedDataBack: {},\n      selfie: null,\n      rectoFaceId: null,\n      successFaceId: null,\n      numeroUniqueCB: '',\n      dateDelivranceCB: '',\n      numeroUniqueExtrait: '',\n      Datededélivrance: ''\n    };\n    const fileInputs = document.querySelectorAll('input[type=\"file\"]');\n    fileInputs.forEach(input => input.value = '');\n    const selfiePreview = document.getElementById('selfiePreview');\n    if (selfiePreview) {\n      selfiePreview.src = '';\n    }\n  }\n  /*\n  checkFocusOut(event: FocusEvent) {\n    const firstname = (event.target as HTMLInputElement).value.trim();\n    if (firstname !== '') {\n      this.http.post('http://localhost:5000/transliterate', { text: firstname })\n        .subscribe({\n          next: (data: any) => console.log('Texte en arabe :', data.arabic),\n          error: err => console.error('Erreur lors de la translittération:', err)\n        });\n    }\n  }*/\n  formatDate(date) {\n    const d = new Date(date);\n    const day = String(d.getDate()).padStart(2, '0');\n    const month = String(d.getMonth() + 1).padStart(2, '0');\n    const year = d.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n};\n__decorate([ViewChild('lastNameInput')], HomeComponent.prototype, \"lastNameInput\", void 0);\n__decorate([ViewChild('videoElement')], HomeComponent.prototype, \"videoElement\", void 0);\n__decorate([ViewChild('canvasElement')], HomeComponent.prototype, \"canvasElement\", void 0);\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})], HomeComponent);","map":{"version":3,"names":["Component","ViewChild","emailjs","UserFields","HomeComponent","ngOnInit","init","onCountryChange","generateToken","Math","random","toString","substring","sendVerificationEmail","_this","_asyncToGenerator","user","email","validateEmail","alert","verificationToken","emailVerificationSent","localStorage","setItem","JSON","stringify","verificationLink","window","location","origin","encodeURIComponent","send","to_email","verification_link","error","console","checkEmail","storedToken","getItem","storedEmail","emailVerified","constructor","http","lastNameInput","videoElement","canvasElement","currentStep","steps","number","title","completed","firstName","lastName","phone","postalCode","address","country","city","dob","dobArabic","gender","genderArabic","idCardFront","idCardBack","extractedDataFront","extractedDataBack","selfie","rectoFaceId","successFaceId","numeroUniqueCB","dateDelivranceCB","numeroUniqueExtrait","Datededélivrance","ageError","dateError","cities","selectedVersoImage","selectedVersoImageHash","isSubmitting","livenessStatus","previousFirstname","previousLastname","citiesByCountry","nextStep","length","validateCurrentStep","updateSteps","prevStep","forEach","step","validatePersonalInfo","validateForm","re","test","String","toLowerCase","onFileChangeRecto","event","field","input","target","files","file","allowedExtensions","fileExtension","name","split","pop","includes","formData","FormData","append","post","subscribe","response","log","message","ligne3","donnees","match","faceId","verifyFacesAndSubmit","genre","getBase64Image","then","base64","ocrData","processVersoImage","image","onFileChangeVerso","lastModified","ligne4","code_barres","barcode","dateRaw","slice","jour","mois","yy","parseInt","annee","padStart","moisArabe","moisNom","reader","FileReader","readAsDataURL","Promise","resolve","onload","result","checkCameraAccess","stream","navigator","mediaDevices","getUserMedia","video","getVideoTracks","stop","liveness","preventDefault","cameraAccessible","status","success_face_id","_","selectedCountry","convertDateToArabic","dateStr","reject","parts","day","month","year","monthNames","monthIndex","arabicDate","onDateChange","birthdate","Date","today","getFullYear","age","monthDiff","getMonth","formattedDate","formatDate","sendTransliteratedDate","catch","apiUrl","data","headers","onGenderChange","sendTransliteratedGender","checkFocusOutFirstName","firstname","value","trim","sendTransliteratedName","checkFocusOutLastName","lastname","transliteratedName","sendData","sendResponse","sendError","transliterateFirstName","transliterateLastName","faceIdRecto","faceIdSuccess","isIdentical","formatPhoneNumber","replace","onlyNumberKey","charCode","which","keyCode","onSubmit","_this2","verifyResponse","toPromise","comparisonResultResponse","get","statut","userData","comparisonStatus","faceVerified","resetForm","add","fileInputs","document","querySelectorAll","selfiePreview","getElementById","src","date","d","getDate","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\3emeISAMM\\PFE\\Code\\FrontEnd\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport emailjs from '@emailjs/browser';\n\nenum UserFields {\n  FirstName = 'firstName',\n  LastName = 'lastName',\n  Country = 'country',\n  City = 'city',\n  Dob = 'dob',\n  Gender = 'gender',\n  IdCardFront = 'idCardFront',\n  IdCardBack = 'idCardBack',\n  Selfie = 'selfie'\n}\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent {\n  UserFields = UserFields; // Exposer l'énumération\n  @ViewChild('lastNameInput') lastNameInput: ElementRef | null = null; // Référence pour le champ lastName\n  @ViewChild('videoElement') videoElement: ElementRef | null = null;\n  @ViewChild('canvasElement') canvasElement: ElementRef | null = null;\n  // Gestion des étapes\n  currentStep: number = 1;\n  steps = [\n    { number: 1, title: 'Données personnelles', completed: false },\n    { number: 2, title: 'Vivacité', completed: false },\n    { number: 3, title: 'Insertion CIN', completed: false }\n  ];\n\n\n\n\n  // Dans la classe\nemailVerified = false;\nemailVerificationSent = false;\nverificationToken = '';\n\nngOnInit() {\n    emailjs.init('YOUR_EMAILJS_USER_ID'); // À obtenir sur emailjs.com\n    this.onCountryChange();\n}\n\ngenerateToken(): string {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}\n\nasync sendVerificationEmail() {\n    if (!this.user.email || !this.validateEmail(this.user.email)) {\n        alert('Veuillez entrer un email valide');\n        return;\n    }\n\n    this.verificationToken = this.generateToken();\n    this.emailVerificationSent = true;\n\n    // Sauvegarder les données temporairement\n    localStorage.setItem('tempFormData', JSON.stringify(this.user));\n    localStorage.setItem('verificationToken', this.verificationToken);\n\n    const verificationLink = `${window.location.origin}/verify?token=${this.verificationToken}&email=${encodeURIComponent(this.user.email)}`;\n\n    try {\n        await emailjs.send('YOUR_EMAILJS_SERVICE_ID', 'YOUR_EMAILJS_TEMPLATE_ID', {\n            to_email: this.user.email,\n            verification_link: verificationLink\n        });\n\n        alert('Email de vérification envoyé !');\n    } catch (error) {\n        console.error('Erreur lors de l\\'envoi:', error);\n        alert('Erreur lors de l\\'envoi de l\\'email');\n    }\n}\n\ncheckEmail() {\n    const storedToken = localStorage.getItem('verificationToken');\n    const storedEmail = localStorage.getItem('verifiedEmail');\n    \n    if (storedToken && storedEmail === this.user.email) {\n        this.emailVerified = true;\n    } else {\n        this.emailVerified = false;\n    }\n}\n\n\n\nuser = {\n    firstName: '',\n    lastName: '',\n    email: '', // Nouveau champ\n    phone: '', // Nouveau champ\n    postalCode: '', // Nouveau champ\n    address: '', // Nouveau champ\n    country: 'Tunisie',\n    city: '',\n    dob: '',\n    dobArabic:'',\n    gender: '',\n    genderArabic:'',\n    idCardFront: '' as string | null,\n    idCardBack: '' as string | null,\n    extractedDataFront: {},\n    extractedDataBack: {},\n    selfie: '' as string | null,\n    rectoFaceId: '' as string | null,\n    successFaceId:'' as string | null,\n    numeroUniqueCB: '',\n    dateDelivranceCB: '',\n    numeroUniqueExtrait: '' as string | null,\n    Datededélivrance: '' as string | null,\n};\n\n  ageError: string = '';\n  dateError: string = '';\n\n  ngOnInit() {\n    this.onCountryChange(); // pour initialiser la liste des villes dès le début\n  }\n  cities: string[] = [];\n  selectedVersoImage: File | null = null;\n  selectedVersoImageHash: string | null = null;\n  isSubmitting = false;\n  livenessStatus: string = '';\n  successFaceId: string = '';\n  previousFirstname: string = '';\n  previousLastname: string = '';\n\n  citiesByCountry: { [key: string]: string[] } = {\n      \"Tunisie\": [\"Nabeul\", \"Qurbus\", \"Kélibia\", \"Yasmine Hammamet\", \"Kerkouane\", \"Al Huwariyah\", \n        \"Kairouan\", \"Douz\", \"Nefta\", \"Ksar Ghilane\", \"Gafsa\", \"Degueche\", \"Shabikah\", \"Tozeur\", \n        \"Bizerte\", \"Takrouna\", \"Djebba\", \"Midoun\", \"Djerba Ajim\", \"Ghizen\", \"Arkou\", \"Houmt Souk\", \n        \"Aghir\", \"Hara Sghira Er Riadh\", \"Mellita\", \"Souk Houmet\", \"Mezraia\", \"Djerba Midun\", \n        \"Ksar Hadada\", \"Tataouine Nord\", \"Tataouine Ville\", \"Ghomrassen\", \"Testour\", \"Kesra\", \n        \"Beja, Tunisie\", \"Le Kef\", \"Makthar\", \"Sabria\", \"Toujane\", \"Zaghouan\", \"Zriba\", \"Matmata\", \n        \"Gabès Médina\", \"Tamezret\", \"La Marsa\", \"La Goulette\", \"Tunis\", \"Carthage\", \"Sidi Bou Saïd\", \n        \"Sbeïtla\", \"Monastir\", \"Sahline\", \"Ariana, Tunisie\", \"CHENINI\", \"Douiret\", \"Bani Khedeche\", \n        \"Ksar Ouled Brahim\", \"Sangho\", \"Médine\", \"Mahboubine\", \"Khalfallah\", \"Ksar Hallouf\", \"Zarzis\", \n        \"Guellala\", \"Hammam Sousse\", \"Hammamet\", \"Sousse\", \"M'saken\", \"El Jem\", \"Hiboun\", \"Mahdia\"],\n};\n\n\n  constructor(private http: HttpClient) {}\nnextStep(): void {\n    if (this.currentStep < this.steps.length && this.validateCurrentStep()) {\n      this.currentStep++;\n      this.updateSteps();\n    }\n  }\n\n  prevStep(): void {\n    if (this.currentStep > 1) {\n      this.currentStep--;\n      this.updateSteps();\n    }\n  }\n\n  updateSteps(): void {\n    this.steps.forEach(step => {\n      step.completed = step.number < this.currentStep;\n    });\n  }\n\n  validateCurrentStep(): boolean {\n    switch (this.currentStep) {\n      case 1: // Données personnelles\n        return this.validatePersonalInfo();\n      case 2: // Vivacité\n        return this.user.selfie !== null;\n      case 3: // Insertion CIN\n        return this.user.idCardFront !== null && this.user.idCardBack !== null;\n      default:\n        return false;\n    }\n  }\n  validatePersonalInfo(): boolean {\n    return (\n      this.user.firstName !== '' &&\n      this.user.lastName !== '' &&\n      this.user.email !== '' &&\n      this.user.phone !== '' &&\n      this.user.postalCode !== '' &&\n      this.user.address !== '' &&\n      this.user.country !== '' &&\n      this.user.city !== '' &&\n      this.user.dob !== '' &&\n      this.user.gender !== ''\n    );\n  }\n  validateForm(): boolean {\n    return this.validatePersonalInfo() && \n           this.user.selfie !== null &&\n           this.user.idCardFront !== null && \n           this.user.idCardBack !== null;\n  }\n\n  validateEmail(email: string): boolean {\n    const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return re.test(String(email).toLowerCase());\n}\n\n\nonFileChangeRecto(event: Event, field: UserFields) {\n    const input = event.target as HTMLInputElement;\n    if (input.files && input.files.length > 0) {\n        const file = input.files[0];\n        // Réinitialiser les données extraites et autres champs liés au recto\n        this.user.extractedDataFront = {}; // Réinitialiser les résultats extraits\n        this.user.rectoFaceId = null;     // Réinitialiser le faceId du recto\n        this.user.idCardFront = null;     // Réinitialiser l'image du recto en base64\n        this.user.numeroUniqueExtrait = null;\n\n        // Vérification de l'extension du fichier\n        const allowedExtensions = ['jpg', 'jpeg', 'png'];\n        const fileExtension = file.name.split('.').pop()?.toLowerCase();\n        if (!allowedExtensions.includes(fileExtension || '')) {\n            alert('Erreur : Seuls les fichiers JPG, JPEG et PNG sont autorisés.');\n            return; // Arrêter le traitement si l'extension n'est pas valide\n        }\n\n        // Appeler le serveur pour traiter l'image\n        const formData = new FormData();\n        formData.append('image', file);\n        this.http.post('http://localhost:5001/ocr/recto', formData).subscribe(\n            (response: any) => {\n                console.log('Résultat OCR Recto:', response);\n                \n                // Ajoutez cette vérification au début du traitement de la réponse\n                if (response.message === \"Image probablement falsifiée (artefacts détectés)\") {\n                    alert(response.message);\n                    return;\n                }\n                \n                // Le reste de votre code existant...\n                const ligne3 = response.donnees[2];\n\n                // Supposons que le numéro unique soit constitué de chiffres\n                const match = ligne3.match(/\\d+/); // extrait la première séquence de chiffres\n\n                this.user.numeroUniqueExtrait = match ? match[0] : null; // Stockage direct dans user\n\n                console.log('Numéro unique extrait et stocké:', this.user.numeroUniqueExtrait);\n                if (response.faceId) {\n                    this.user.rectoFaceId = response.faceId; // Stocker le faceId de recto\n                    console.log('Face ID de recto stocké avec succès :', this.user.rectoFaceId);\n                    // Vérifier les visages si un success_face_id existe déjà\n                    if (this.user.successFaceId) {\n                        this.verifyFacesAndSubmit();\n                    }\n                } else {\n                    console.error('Aucun faceId trouvé dans la réponse.');\n                }\n                if (!response.error) {\n                    alert('Succès : ' + response.message);\n                }\n                // Stocker le genre en arabe\n                this.user.gender = response.genre === 'homme' ? 'ذكر' : 'أنثى';\n                if (response.error) {\n                    alert('Erreur : ' + response.message);\n                    return;\n                }\n                // Convertir l'image en base64 et stocker\n                this.getBase64Image(file).then(base64 => {\n                    this.user.idCardFront = base64;\n                });\n                // Stocker les données extraites\n                this.user.extractedDataFront = response.donnees;\n                // Envoyer les données à comparaison_N_P.py\n                const ocrData = {\n                    'ocr_result': this.user.extractedDataFront,\n                    'genre': this.user.gender // Envoyer le genre au serveur\n                };\n                this.http.post('http://localhost:5003/ocr-extraction', ocrData).subscribe(\n                    (response: any) => {\n                        console.log(`Résultats d'extraction OCR envoyés au serveur Python :`, response);\n                    },\n                    error => {\n                        console.error('Erreur lors de l\\'envoi des données à comparaison_N_P.py (OCR Recto):', error);\n                    }\n                );\n                if (this.selectedVersoImage) {\n                    this.processVersoImage(this.selectedVersoImage);\n                }\n            },\n            error => {\n                console.error('Erreur lors du traitement OCR Recto :', error);\n            }\n        );\n    }\n}\n  \nprocessVersoImage(image: File) {\n  // Nettoyer les données précédentes du Verso\n  this.user.idCardBack = null;\n  this.user.extractedDataBack = {};\n\n  const formData = new FormData();\n  formData.append('image', image);\n  \n\n  this.http.post('http://localhost:5002/ocr/verso', formData)\n      .subscribe((response: any) => {\n          console.log('Résultat OCR Verso:', response);\n          if (response.message === \"Conditions non remplies\") {\n            alert(\"Erreur : Elle ne s'agit pas d'un Verso de CIN\");\n            return;\n          }\n          this.getBase64Image(image).then(base64 => {\n              this.user.idCardBack = base64;\n          });\n          this.user.extractedDataBack = response.donnees; // Stocker les résultats extractés\n      }, error => {\n          console.error('Erreur lors du traitement OCR Verso:', error);\n      });\n}\n\n\nonFileChangeVerso(event: Event, field: UserFields) {\n    const input = event.target as HTMLInputElement;\n    if (input.files && input.files.length > 0) {\n        this.selectedVersoImage = input.files[0]; // Stocker l'image Verso\n        this.selectedVersoImageHash = this.selectedVersoImage.name + this.selectedVersoImage.lastModified;\n        const file = input.files[0];\n                // Vérification de l'extension du fichier\n                const allowedExtensions = ['jpg', 'jpeg', 'png'];\n                const fileExtension = file.name.split('.').pop()?.toLowerCase();\n                if (!allowedExtensions.includes(fileExtension || '')) {\n                    alert('Erreur : Seuls les fichiers JPG, JPEG et PNG sont autorisés.');\n                    return; // Arrêter le traitement si l'extension n'est pas valide\n                }\n        this.user.idCardBack = null;\n        this.user.extractedDataBack = {};\n        // Appeler le serveur pour traiter l'image\n        const formData = new FormData();\n        formData.append('image', file);\n        \n\n        this.http.post('http://localhost:5002/ocr/verso', formData)\n            .subscribe((response: any) => {\n              console.log('Résultat OCR Verso:', response);\n\n              // Accéder à la ligne 4 dans le tableau `donnees`\n              const ligne4 = response.donnees[4];\n\n              // Vérifier qu'elle existe et contient une date\n            if (ligne4) {\n                const match = ligne4.match(/(\\d{2}\\s\\S+\\s\\d{4})/);\n                this.user.Datededélivrance = match ? match[1] : null; // Stockage direct\n                console.log('Date de délivrance extraite:', this.user.Datededélivrance);\n            } else {\n                console.log(\"La ligne 4 n'existe pas dans les données OCR.\");\n              }\n\n                console.log('Données code-barres:', response.code_barres);\n                if (response.code_barres && response.code_barres.length > 0) {\n                  const barcode = response.code_barres[0]; // Prend le premier code-barres\n                  const numeroUniqueCB = barcode.substring(0, 8);\n                  const dateRaw = barcode.slice(-6); // 6 derniers chiffres\n\n                  const jour = dateRaw.substring(0, 2);\n                  const mois = dateRaw.substring(2, 4);\n                  const yy = parseInt(dateRaw.substring(4, 6), 10);\n\n                  const annee = yy < 25 ? `20${yy.toString().padStart(2, '0')}` : `19${yy.toString().padStart(2, '0')}`;\n\n                  const moisArabe: { [key: string]: string } = {\n                    '01': 'جانفي',\n                    '02': 'فيفري',\n                    '03': 'مارس',\n                    '04': 'أفريل',\n                    '05': 'ماي',\n                    '06': 'جوان',\n                    '07': 'جويلية',\n                    '08': 'أوت',\n                    '09': 'سبتمبر',\n                    '10': 'أكتوبر',\n                    '11': 'نوفمبر',\n                    '12': 'ديسمبر'\n                  };\n\n                  const moisNom = moisArabe[mois] || 'غير معروف';\n                  const dateDelivranceCB = `${jour} ${moisNom} ${annee}`;\n\n                  console.log(\"Numéro unique (Code-barres):\", numeroUniqueCB);\n                  console.log(\"Date de délivrance (Code-barres):\", dateDelivranceCB);\n\n                  this.user.numeroUniqueCB = numeroUniqueCB;\n                  this.user.dateDelivranceCB = dateDelivranceCB;\n                }\n\n\n\n\n                if (response.message != \"Conditions non remplies\") {\n                  alert(\"Erreur : L'image insérée est un Verso\");\n                }\n\n                if (response.message === \"Conditions non remplies\") {\n                  alert(\"Erreur : Elle ne s'agit pas d'un Verso de CIN\");\n                  return;\n                }\n                this.getBase64Image(file).then(base64 => {\n                  this.user.idCardBack = base64;\n                });\n                this.user.extractedDataBack = response.donnees; // Stocker les résultats extractés\n            }, error => {\n                console.error('Erreur lors du traitement OCR Verso:', error);\n            });\n    }\n}\n\n// Nouvelle méthode pour convertir l'image en base64\ngetBase64Image(file: File): Promise<string | null> {\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n  return new Promise(resolve => {\n    reader.onload = () => resolve(reader.result as string);\n  });\n}\n\n\n\n\n  async checkCameraAccess(): Promise<boolean> {\n    try {\n      // Demande l'accès à la caméra\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      // Libère la caméra après la vérification\n      stream.getVideoTracks()[0].stop();\n      return true; // La caméra est accessible\n    } catch (error) {\n      console.error('Erreur d\\'accès à la caméra :', error);\n      return false; // La caméra n'est pas accessible\n    }\n  }\n  \n  liveness(event: Event) {\n    event.preventDefault();\n  \n    // Réinitialiser les données de selfie et faceId\n    this.user.successFaceId = null;\n    this.user.selfie = null;\n  \n    // Vérifier si la caméra est accessible\n    this.checkCameraAccess().then((cameraAccessible) => {\n      if (!cameraAccessible) {\n        alert('La caméra est fermée ou inaccessible.');\n        return;\n      }\n  \nthis.http.post('http://localhost:5005/api/liveness', {})\n  .subscribe(\n    (response: any) => {\n      console.log('Résultat de la détection de vivacité :', response);\n      if (response.status === 'success') {\n        alert('Détection de vivacité réussie !');\n\n        if (response.success_face_id) {\n          this.user.successFaceId = response.success_face_id;\n          console.log('Face ID de success stocké avec succès :', this.user.successFaceId);\n        }\n\n        if (response.selfie) {\n          this.user.selfie = response.selfie;\n          console.log('Image selfie stockée avec succès');\n        }\n\n        if (this.user.rectoFaceId) {\n          this.verifyFacesAndSubmit();\n        }\n      } else {\n        alert('Échec de la détection de vivacité.');\n      }\n    },\n    (_) => {\n      // Ne pas afficher d'erreur technique, juste un message propre\n      this.livenessStatus = 'failure';\n      console.log('Impossible de détecter la vivacité (erreur de requête).');\n      alert('Vous n\\'êtes pas une personne réelle.');\n    }\n  );\n\n    });\n  }\n\n  onCountryChange() {\n    const selectedCountry = this.user.country;\n    this.cities = this.citiesByCountry[selectedCountry] || [];\n    this.user.city = '';\n  }\n  \n\n\n\n  convertDateToArabic(dateStr: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      if (!dateStr) {\n        resolve('');\n        return;\n      }\n  \n      const parts = dateStr.split('/');\n      if (parts.length !== 3) {\n        resolve(dateStr); // Retourne la date originale si le format est incorrect\n        return;\n      }\n  \n      const day = parts[0];\n      const month = parts[1];\n      const year = parts[2];\n  \n      const monthNames = ['جانفي', 'فيفري','مارس','أفريل','ماي','جوان','جويلية','أوت','سبتمبر','أكتوبر','نوفمبر','ديسمبر'];\n      \n  \n      const monthIndex = parseInt(month, 10) - 1;\n      if (monthIndex < 0 || monthIndex >= 12) {\n        resolve(dateStr); // Retourne la date originale si le mois est invalide\n        return;\n      }\n  \n      const arabicDate = `${day} ${monthNames[monthIndex]} ${year}`;\n      resolve(arabicDate);\n    });\n  }\n  \n\n\n  onDateChange() {\n    const birthdate = new Date(this.user.dob);\n    const today = new Date();\n    \n    if (birthdate.getFullYear() > today.getFullYear()) {\n      this.dateError = \"Choix incorrect : l'année choisie ne peut pas être supérieure à l'année actuelle.\";\n      this.ageError = \"\";\n      return;\n    } else {\n      this.dateError = \"\";\n    }\n  \n    const age = today.getFullYear() - birthdate.getFullYear();\n    const monthDiff = today.getMonth() - birthdate.getMonth();\n  \n    if (age < 18 || (age === 18 && monthDiff < 0)) {\n      this.ageError = \"Vous devez avoir au moins 18 ans.\";\n    } else {\n      this.ageError = \"\";\n    }\n  \n    // Convertir la date en format arabe et l'envoyer au serveur\n    const formattedDate = this.formatDate(this.user.dob);\n    this.convertDateToArabic(formattedDate).then(arabicDate => {\n      this.user.dobArabic = arabicDate;\n      console.log('Date transformée en arabe:', this.user.dobArabic);\n      \n      // Envoyer la date au serveur\n      this.sendTransliteratedDate(arabicDate);\n    }).catch(error => {\n      console.error('Erreur lors de la conversion de la date:', error);\n    });\n  }\n\n  sendTransliteratedDate(arabicDate: string) {\n    const apiUrl = 'http://localhost:5003/transliterate-names';\n    const data = {\n      'تاريخ الولادة': arabicDate,\n    };\n  \n    this.http.post(apiUrl, data, { headers: { 'Content-Type': 'application/json' } })\n      .subscribe(response => {\n        console.log('Date en arabe envoyée avec succès:', response);\n      }, error => {\n        console.error('Erreur lors de l\\'envoi de la date:', error);\n      });\n  }\n  \n\n\n\n\n\n\n  onGenderChange(genre: string) {\n    this.user.genderArabic = genre; // Mettre à jour le genre dans l'objet user\n    console.log('Genre sélectionné:', this.user.genderArabic);\n    \n    // Envoyer le genre au serveur\n    this.sendTransliteratedGender(genre);\n}\n\nsendTransliteratedGender(genre: string) {\n    const apiUrl = 'http://localhost:5003/transliterate-names';\n\n    // Convertir le genre en arabe\n    const genderArabic = (genre === 'homme') ? 'ذكر' : 'أنثى';\n\n    const data = {\n        'الجنس': genderArabic // Utiliser le genre en arabe\n    };\n\n    this.http.post(apiUrl, data, { headers: { 'Content-Type': 'application/json' } })\n        .subscribe(response => {\n            console.log('Genre en arabe envoyé avec succès:', response);\n        }, error => {\n            console.error('Erreur lors de l\\'envoi du genre:', error);\n        });\n}\n\n\n\n  checkFocusOutFirstName(event: FocusEvent) {\n    const firstname = (event.target as HTMLInputElement).value.trim();\n    if (firstname!== '' && firstname!== this.previousFirstname) {\n      this.sendTransliteratedName('firstName', firstname);\n      this.previousFirstname = firstname;\n    }\n  }\n  \n  checkFocusOutLastName(event: FocusEvent) {\n    const lastname = (event.target as HTMLInputElement).value.trim();\n    if (lastname!== '' && lastname!== this.previousLastname) {\n      this.sendTransliteratedName('lastName', lastname);\n      this.previousLastname = lastname;\n    }\n  }\n\n  \n  sendTransliteratedName(field: string, value: string) {\n    const apiUrl = 'http://localhost:5000/transliterate';\n    const data = {\n      [field === 'firstName'? 'firstName' : 'lastName']: value\n    };\n  \n    this.http.post(apiUrl, data, { headers: { 'Content-Type': 'application/json' } })\n     .subscribe(response => {\n        const transliteratedName = field === 'firstName'? (response as any)['الاسم'] : (response as any)['اللقب'];\n        console.log(`${field} translittéré : ${transliteratedName}`);\n  \n        // Envoyer le résultat au serveur Python\n        const sendData = {\n          [field === 'firstName'? 'الاسم' : 'اللقب']: transliteratedName\n        };\n\n        \n        this.http.post('http://localhost:5003/transliterate-names', sendData, { headers: { 'Content-Type': 'application/json' } })\n         .subscribe(sendResponse => {\n            console.log(`${field} envoyé au serveur Python avec succès`);\n          }, sendError => {\n            console.error(`Erreur lors de l'envoi de ${field} au serveur Python :`, sendError);\n          });\n\n\n      }, error => {\n        console.error(`Erreur lors de la translittération de ${field} :`, error);\n      });\n  }\n  \n\n  transliterateFirstName(): void {\n    if (this.user.firstName.trim()!== '') {\n      const apiUrl = 'http://localhost:5000/transliterate';\n      const data = {\n        firstName: this.user.firstName\n      };\n  \n      this.http.post(apiUrl, data, { headers: { 'Content-Type': 'application/json' } })\n        .subscribe(response => {\n          console.log(`Prénom translittéré : ${(response as any)['الاسم']}`);\n          // Traitement supplémentaire si nécessaire\n        }, error => {\n          console.error('Erreur lors de la translittération du prénom :', error);\n        });\n    }\n  }\n  \n  transliterateLastName(): void {\n    if (this.user.lastName.trim()!== '') {\n      const apiUrl = 'http://localhost:5000/transliterate';\n      const data = {\n        lastName: this.user.lastName\n      };\n  \n      this.http.post(apiUrl, data, { headers: { 'Content-Type': 'application/json' } })\n        .subscribe(response => {\nconsole.log(`Nom translittéré : ${(response as any)['اللقب']}`);\n          // Traitement supplémentaire si nécessaire\n        }, error => {\n          console.error('Erreur lors de la translittération du nom :', error);\n        });\n    }\n  }\n\n  verifyFacesAndSubmit() {\n    // Récupérer les faceId depuis les réponses précédentes\n    const faceIdRecto = this.user.rectoFaceId; // FaceId de l'image recto\n    const faceIdSuccess = this.user.successFaceId; // FaceId de l'image success\n\n    if (!faceIdRecto || !faceIdSuccess) {\n        alert('Les faceId ne sont pas disponibles pour la vérification.');\n        return;\n    }\n\n    console.log('Face ID de recto :', faceIdRecto);\n    console.log('Face ID de success :', faceIdSuccess);\n\n    // Préparer les données pour la vérification des visages\n    const data = {\n        faceIdRecto: faceIdRecto,\n        faceIdSuccess: faceIdSuccess\n    };\n\n    // Appeler l'API backend pour la vérification des visages\n    this.http.post('http://localhost:5008/api/verify-faces', data).subscribe(\n        (response: any) => {\n            console.log('Résultat de la vérification des visages :', response);\n            if (response.isIdentical) {\n                alert('Vérification des visages réussie !');\n            } else {\n                alert('Les visages ne correspondent pas.');\n            }\n        },\n        (error) => {\n            console.error('Erreur lors de la vérification des visages :', error);\n            alert('Une erreur est survenue lors de la vérification des visages.');\n        }\n    );\n}\n  \n\nformatPhoneNumber(event: any) {\n    let value = event.target.value.replace(/\\D/g, ''); // Supprime tous les caractères non numériques\n\n    // Limite la longueur à 8 chiffres max\n    if (value.length > 8) {\n        value = value.substring(0, 8);\n    }\n\n    // Formate en XX XXX XXX\n    if (value.length > 5) {\n        value = value.substring(0, 2) + ' ' + value.substring(2, 5) + ' ' + value.substring(5);\n    } else if (value.length > 2) {\n        value = value.substring(0, 2) + ' ' + value.substring(2);\n    }\n\n    event.target.value = value;\n}\n\nonlyNumberKey(event: any) {\n    const charCode = (event.which) ? event.which : event.keyCode;\n    // Autoriser uniquement les chiffres (0-9)\n    if (charCode > 31 && (charCode < 48 || charCode > 57)) {\n        event.preventDefault();\n        return false;\n    }\n    return true;\n}\n\nasync onSubmit() {\n  if (this.isSubmitting) return;\n  this.isSubmitting = true;\n\n  // 1. Validation des champs obligatoires\n  if (!this.validateForm()) {\n      alert(\"Veuillez remplir tous les champs du formulaire.\");\n      this.isSubmitting = false;\n      return;\n  }\n\n  // 2. Validation de l'âge\n  const birthdate = new Date(this.user.dob);\n  const today = new Date();\n  if (birthdate.getFullYear() > today.getFullYear()) {\n      alert(\"Choix incorrect : l'année choisie ne peut pas être supérieure à l'année actuelle.\");\n      this.isSubmitting = false;\n      return;\n  }\n  const age = today.getFullYear() - birthdate.getFullYear();\n  const monthDiff = today.getMonth() - birthdate.getMonth();\n  if (age < 18 || (age === 18 && monthDiff < 0)) {\n      alert(\"Vous devez avoir au moins 18 ans.\");\n      this.isSubmitting = false;\n      return;\n  }\n\n  // 3. Vérification que les faceIds sont disponibles\n  if (!this.user.rectoFaceId || !this.user.successFaceId) {\n      alert(\"La vérification faciale n'a pas été effectuée.\");\n      this.isSubmitting = false;\n      return;\n  }\n\n  // 4. Comparaison des numéros uniques et des dates\n    console.log('DEBUG - Numéro extrait:', this.user.numeroUniqueExtrait);\n    console.log('DEBUG - Numéro CB:', this.user.numeroUniqueCB);\n\n    if (!this.user.numeroUniqueExtrait || !this.user.numeroUniqueCB) {\n        alert(\"Les informations du recto ou du verso n'ont pas été correctement extraites.\");\n        this.isSubmitting = false;\n        return;\n    }\n\n    if (this.user.numeroUniqueExtrait.toString().trim() !== this.user.numeroUniqueCB.toString().trim()) {\n        alert(`Le numéro unique extrait du recto (${this.user.numeroUniqueExtrait}) ne correspond pas au numéro du code-barres (${this.user.numeroUniqueCB}).`);\n        this.isSubmitting = false;\n        return;\n    }\n\n  // 4. Comparaison des numéros uniques et des dates\n    console.log('DEBUG - Date de délivrance extraite:', this.user.Datededélivrance);\n    console.log('DEBUG - Date de délivrance CB:', this.user.dateDelivranceCB);\n\nif (!this.user.Datededélivrance || !this.user.dateDelivranceCB) {\n    alert(\"Les dates de délivrance n'ont pas été correctement extraites.\");\n    this.isSubmitting = false;\n    return;\n}\n\nif (this.user.Datededélivrance.trim() !== this.user.dateDelivranceCB.trim()) {\n    alert(`La date de délivrance extraite du recto (${this.user.Datededélivrance}) ne correspond pas à la date du code-barres (${this.user.dateDelivranceCB}).`);\n    this.isSubmitting = false;\n    return;\n}\n\n\n\n\n\n\n  try {\n      // 5. Vérification faciale\n      const verifyResponse = await this.http.post<any>(\n          'http://localhost:5008/api/verify-faces',\n          {\n              faceIdRecto: this.user.rectoFaceId,\n              faceIdSuccess: this.user.successFaceId\n          }\n      ).toPromise();\n\n      if (!verifyResponse.isIdentical) {\n          alert(\"La vérification faciale a échoué. Les visages ne correspondent pas.\");\n          this.isSubmitting = false;\n          return;\n      }\n\n      // 6. Vérification OCR\n      const comparisonResultResponse = await this.http.get<any>(\n          'http://localhost:5003/get-comparison-result'\n      ).toPromise();\n      \n      if (comparisonResultResponse.statut == \"ok\") {\n          alert(\"Les données insérées se correspondent.\");\n          this.isSubmitting = true;\n      }\n\n      if (comparisonResultResponse.statut !== \"ok\") {\n          alert(\"Les données insérées ne se correspondent pas.\");\n          this.isSubmitting = false;\n          return;\n      }\n\n      // Toutes les validations sont passées - soumission des données\n      const userData = {\n          firstName: this.user.firstName,\n          lastName: this.user.lastName,\n          country: this.user.country,\n          city: this.user.city,\n          dob: this.formatDate(this.user.dob),\n          dobArabic: this.user.dobArabic,\n          gender: this.user.gender,\n          idCardFront: this.user.idCardFront,\n          idCardBack: this.user.idCardBack,\n          extractedDataFront: this.user.extractedDataFront,\n          extractedDataBack: this.user.extractedDataBack,\n          selfie: this.user.selfie,\n          comparisonStatus: comparisonResultResponse.statut,\n          faceVerified: verifyResponse.isIdentical,\n          numeroUniqueCB: this.user.numeroUniqueCB,\n          dateDelivranceCB: this.user.dateDelivranceCB,\n          numeroUniqueExtrait: this.user.numeroUniqueExtrait,\n          Datededélivrance: this.user.Datededélivrance\n      };\n\n      this.http.post('http://localhost:5000/api/users', userData)\n          .subscribe(\n              (response) => {\n                  console.log('Utilisateur ajouté avec succès!');\n                  alert('Création du compte se fait avec succès!');\n                  \n                  // Réinitialiser le formulaire\n                  this.resetForm();\n                  \n                  // Revenir à l'étape 1\n                  this.currentStep = 1;\n                  this.updateSteps();\n              },\n              (error) => {\n                  console.error('Erreur lors de l\\'ajout:', error);\n                  alert('Erreur lors de l\\'enregistrement: ' + error.error.message);\n              }\n          ).add(() => {\n              this.isSubmitting = false;\n          });\n\n  } catch (error) {\n      console.error(\"Erreur:\", error);\n      alert(\"Une erreur est survenue lors de la vérification.\");\n      this.isSubmitting = false;\n  }\n}\nresetForm() {\n    this.user = {\n        firstName: '',\n        lastName: '',\n        email: '', // Réinitialiser email\n        phone: '', // Réinitialiser téléphone\n        postalCode: '', // Réinitialiser code postal\n        address: '', // Réinitialiser adresse\n        country: '',\n        city: '',\n        dob: '',\n        dobArabic: '',\n        gender: '',\n        genderArabic:'',\n        idCardFront: '',\n        idCardBack: '',\n        extractedDataFront: {},\n        extractedDataBack: {},\n        selfie: null,\n        rectoFaceId:null,\n        successFaceId:null,\n        numeroUniqueCB: '',\n        dateDelivranceCB: '',\n        numeroUniqueExtrait: '',\n        Datededélivrance: '',\n    };\n\n    const fileInputs = document.querySelectorAll('input[type=\"file\"]') as NodeListOf<HTMLInputElement>;\n    fileInputs.forEach(input => input.value = '');\n\n    const selfiePreview = document.getElementById('selfiePreview') as HTMLImageElement;\n    if (selfiePreview) {\n        selfiePreview.src = '';\n    }\n}\n\n \n  /*\n  checkFocusOut(event: FocusEvent) {\n    const firstname = (event.target as HTMLInputElement).value.trim();\n    if (firstname !== '') {\n      this.http.post('http://localhost:5000/transliterate', { text: firstname })\n        .subscribe({\n          next: (data: any) => console.log('Texte en arabe :', data.arabic),\n          error: err => console.error('Erreur lors de la translittération:', err)\n        });\n    }\n  }*/\n  \n  \n  formatDate(date: string): string {\n    const d = new Date(date);\n    const day = String(d.getDate()).padStart(2, '0');\n    const month = String(d.getMonth() + 1).padStart(2, '0');\n    const year = d.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}